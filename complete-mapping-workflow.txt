## The general outline of the workflow was described in Csabai and Solymosi (2022) Research Square doi:10.21203/rs.3.rs-1330800/v1
## Mitoscan maps NGS reads to all complete mitochondrial genomes in NCBI, and also be adapted to coronavirus read contamination
## Mito genomes that have high coverage may represent contaminating sequences


# Install latest version of samtools. Change the path as follows:

export PATH=/home/ec2-user/samtools-1.15.1/bin:$PATH


# Download all mitochondrial genomes from:

https://ftp.ncbi.nlm.nih.gov/refseq/release/mitochondrion/

# There are two files of mitochondrial genomes, mitochondrion.1.1.genomic.fna.gz and mitochondrion.2.1.genomic.fna.gz
# These should be concatanated, plus any additional mitochondrial genomes can be added as well

cat mitochondrion.1.1.genomic.fna.gz mitochondrion.2.1.genomic.fna.gz > mitochondrion.cat.genomic.fna.gz


# Make an index:

bowtie2-build mitochondrion.cat.genomic.fna.gz mitochondrion.cat.genomic.fna.index


# Remove sample reads < 20 bp, using BBmap reformat.sh, as these cause non-specific mapping (h/t Adrian J @bumblesci)
# This step is necessary for Ion Torrent data, which has a lot of short reads, but unnecessary for Illumina datasets

reformat.sh minlength=20 in=*.fastq out=*.filt.fastq


# Map the sample reads to the reference mitochondrial genomes:

bowtie2 -x mitochondrion.cat.genomic.fna.index -U *.filt.fastq -S file.sam


# (for a 100 % match use bbmap, this does not require an index and is faster)
# (this is more useful for coronavirus genomes, when looking for CoV contamination)
# (note, cross-mapping is quirky in bbmap - often reads 100 % mapping to one genome, will not map to another even if also a 100% match)

bbmap.sh minid=1 in=*.filt.fastq  ref=../allcoronavirus-282.fa  out=file.sam


# Sort the outputted sam file:

samtools sort file.sam -o file.sorted.sam


# Calculate the coverage as follows:

samtools coverage file.sorted.sam -o coverage.out


# Extract the # mapped reads and coverage columns:

awk -F '\t' '{print($1"\t"$4"\t"$6)}' coverage.out > out


# Then, sort the third output column, with the highest coverage at the top:

sort -k3 -r -n out > sorted


# Alternatively, do both steps together:

awk -F '\t' '{print($1"\t"$4"\t"$6)}' coverage.out | sort -k3 -r  -n > sorted2


##### In order to add species names to the output file the following series of steps can be taken:

# 1. Make a sorted taxa list:

grep '>' mitochondrion.cat.genomic.fna | sed 's/>//g' | awk -F ' ' '{print $1"\t"$2" "$3}' > taxa

sort -k1 taxa > sortedtaxa

# 2. Match the output of the mapping with the sorted taxa list:

sed -i "1d" coverage.out

awk -F '\t' '{print($1"\t"$4"\t"$6)}' coverage.out | sort > nusorted

join -t $'\t'   nusorted ../../sortedtaxa | tee joined

sort -t $'\t' -k3 -rn joined > final-list


# 3. An alternative python method for matching species names using the taxa list (courtesy Dieunel Derilus):

>>>taxa=pd.read_csv("taxa.csv")
>>>s6=pd.read_table("NBP01_S6.out.sorted")
>>>s5=pd.read_table("NBP02_S5.out.sorted")
>>>s5.columns= ['mito_id', 'coverage']
>>>s6.columns= ['mito_id', 'coverage']
>>>map1=s5.merge(s6=on='mito_id')
>>> map2=map1.merge(taxa, on="mito_id")
>>> map2.to_csv("mappin_to_mitochondria.csv")


##################################################################################################################

# the pipeline can be modified to test for coronavirus reads in an NGS dataset
# 230 coronavirus genomes were downloaded from CoVDB(v3)
# These included SARS2, SARS, OC43, NL63, HKU1, 229E, MERS, bat and pangolin coronavirus genomes (see file allcoronavirus.fa)
# the allcoronavirus.fa file should be indexed as follows:

bowtie2-build allcoronavirus.fa allcoronavirus.fa.index


# then the above workflow can be followed

# polyA tails can be removed from the coronavirus genomes as follows (this prevents artefactual mapping to the polyA tail)

cutadapt -a "A{100}"  allcoronavirus.fa  >  allcoronavirus-no-polyA.fa

# new coronavirus genomes were added to the file (and polyA tails removed):

allcoronavirus-281-no-polyA.fa

#####################################################################################################

# the pipeline can also be modified to scan for the presence of RNA/DNA viruses in NGS datasets
# these can be associated with eukaryotic hosts, or may  be associated with prokaryotes

# the following file contains all NCBI virus genome sequences and was downloaed from 
# https://ftp.ncbi.nlm.nih.gov/refseq/release/viral/

viral.1.1.genomic.fna.gz

# then the file can be indexed using bowtie-build, and inserted into the coronascan pipeline
# see the script RNAvirusscan.sh




